/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import {Platform} from 'react-native';
import {createStackNavigator, createAppContainer} from 'react-navigation'
import AmazonWebView from './Components/AmazonWebview'
import ProductListView from './Components/ProductListView'
import EditList from './Components/EditList'
import SQLite from 'react-native-sqlite-storage'
import axios from 'axios'
import PushNotification from 'react-native-push-notification'
import BackgroundJob from 'react-native-background-job';
import cherrio from 'react-native-cheerio'


SQLite.DEBUG(true);
global.db = SQLite.openDatabase({name: "productDb.db", location: 'default', createFromLocation: '~www/productDb.db'}, () => {
  console.log('open db successfully');
}, (err) => console.log('error opening db: ' + err));

db.transaction((tx) => {
  tx.executeSql('CREATE TABLE IF NOT EXISTS AmazonProduct (id INTEGER PRIMARY KEY,title TEXT NOT NULL,url TEXT NOT NULL,price TEXT NOT NULL,wishPrice TEXT NOT NULL,img TEXT,ignore INTEGER)',
  [], (tx, rs) => console.log(rs));
}, (tx, err) => console.log(err));

const backgroundJob = {
  jobKey: "myJob",
  job: () => {
    db.transaction(tx => {
      tx.executeSql("SELECT * FROM AmazonProduct",
      [], (tx, res) => {
          for(let i = 0; i < res.rows.length; i++) {
            if(res.rows.item(i).ignore == 1)
              break;
            let wishPrice = res.rows.item(i).wishPrice;
            let url = res.rows.item(i).url;
            axios.get(url, {}).then(res => {
              const html = res.data;
              const $ = cherrio.load(html);

              var price = $('#priceblock_dealprice').text().slice(1, -1);
              if (price == "")
                  price = $("#priceblock_ourprice").text().slice(1, -1);
              var title = $('#productTitle').text().trim();
              title = title.length > 80 ? title.slice(0,78) + '...' : title
              if(Number(wishPrice) >= Number(price)) { 
                PushNotification.configure({
                  // (optional) Called when Token is generated (iOS and Android)
                  onRegister: function(token) {
                      console.log( 'TOKEN:', token );
                  },
                  // (required) Called when a remote or local notification is opened or received
                  onNotification: function(notification) {
                      console.log( 'NOTIFICATION:', notification );
                  },
                  /**
                    * (optional) default: true
                    * - Specified if permissions (ios) and token (android and ios) will requested or not,
                    * - if not, you must call PushNotificationsHandler.requestPermissions() later
                    */
                  requestPermissions: true,
                });
                
                PushNotification.localNotification({
                  /* Android Only Properties */
                  id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                  ticker: "A product meets your wish price", // (optional)
                  autoCancel: true, // (optional) default: true
                  largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                  smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                  ongoing: false, // (optional) set whether this is an "ongoing" notification
                  priority: "high", // (optional) set notification priority, default: high
                  visibility: "public", // (optional) set notification visibility, default: private
                  importance: "high", // (optional) set notification importance, default: high
                  bigText: title,
                  /* iOS and Android properties */
                  title: "Product Hunt", // (optional)
                  message: 'A product meets your wish price',
                  playSound: true, // (optional) default: true
                  soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                  number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                  actions: '["Check out"]',  // (Android only) See the doc for notification actions to know more
                });
                }
              })
          }
      })
    })
  }
 };


 BackgroundJob.register(backgroundJob);

 var backgroundSchedule = {
  jobKey: "myJob",
  timeout: 40000
 }

 BackgroundJob.schedule(backgroundSchedule)
  .then(() => console.log("Success"))
  .catch(err => console.err(err));

const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' + 'Cmd+D or shake for dev menu',
  android:
    'Double tap R on your keyboard to reload,\n' +
    'Shake or press menu button for dev menu',
});

const appStackNavigator = createStackNavigator({
  Products: ProductListView,
  Webview: AmazonWebView,
  EditList: EditList
});

export default createAppContainer(appStackNavigator);
